#include <stdio.h>
#include <stdlib.h>
struct node {
  int key;
  struct node *left, *right;
};

// Creation
struct node *newNode(int item) {
  struct node *temp = (struct node *)malloc(sizeof(struct node));
  temp->key = item;
  temp->left = temp->right = NULL;
  return temp;
}

// Inorder Traversal using recursion
void inorder(struct node *root) {
  if (root != NULL) {
    // Traverse left
    inorder(root->left);
    // Traverse root
    printf("%d ", root->key);
    // Traverse right
    inorder(root->right);
  }
}
void preorder(struct node *root) {
  if (root != NULL) {
    // Traverse left
     printf("%d ", root->key);
    preorder(root->left);
    // Traverse right
    preorder(root->right);
  }
}
// Find the inorder successor
struct node *minValueNode(struct node *node) {
  struct node *current = node;
  // Find the leftmost leaf
  while (current && current->left != NULL)
    current = current->left;
  return current;
}

// Insert a node in BST
struct node *insert(struct node *node, int key) {
	struct node* root = node;
	if(root == NULL)
	{
		return newNode(key);
	}
	else{
		if(key < root -> key)
		{
			root->left = insert(root -> left, key);
		}else{
			root -> right = insert(root -> right, key);
		}
	}
	return root;

}

// Deleting a node
struct node *deleteNode(struct node *root, int key) {
	if (root == NULL)
	{
		return root;
	}
	if(key < root -> key)
	{
		root -> left = deleteNode(root -> left,key);
	}else if( key > root -> key)
	{
root -> right = deleteNode(root -> right, key);
	}else{
		if(root -> left == NULL){

			struct node* temp = root -> right;
			free(root);
			return temp;
		}
		else if( root -> right == NULL){
			struct node* temp = root -> left;
			free(root);
			return temp;
		}

		struct node* temp = minValueNode(root -> right);
		root -> key = temp -> key;
		root -> right = deleteNode(root -> right, temp -> key);
	}
return root;
